package com.spring.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.spring.model.Employee;
import com.spring.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;spring_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.spring.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author 556823
 * @see EmployeeImpl
 * @see com.spring.model.Employee
 * @see com.spring.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.spring.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "spring_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "empId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "empName", Types.VARCHAR },
            { "grade", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table spring_Employee (empId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,empName VARCHAR(75) null,grade VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table spring_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.empId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY spring_Employee.empId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.spring.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.spring.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.spring.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _empId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _empName;
    private String _grade;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _empId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmpId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _empId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("empId", getEmpId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("empName", getEmpName());
        attributes.put("grade", getGrade());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long empId = (Long) attributes.get("empId");

        if (empId != null) {
            setEmpId(empId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String empName = (String) attributes.get("empName");

        if (empName != null) {
            setEmpName(empName);
        }

        String grade = (String) attributes.get("grade");

        if (grade != null) {
            setGrade(grade);
        }
    }

    @Override
    public long getEmpId() {
        return _empId;
    }

    @Override
    public void setEmpId(long empId) {
        _empId = empId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getEmpName() {
        if (_empName == null) {
            return StringPool.BLANK;
        } else {
            return _empName;
        }
    }

    @Override
    public void setEmpName(String empName) {
        _empName = empName;
    }

    @Override
    public String getGrade() {
        if (_grade == null) {
            return StringPool.BLANK;
        } else {
            return _grade;
        }
    }

    @Override
    public void setGrade(String grade) {
        _grade = grade;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmpId(getEmpId());
        employeeImpl.setGroupId(getGroupId());
        employeeImpl.setCompanyId(getCompanyId());
        employeeImpl.setUserId(getUserId());
        employeeImpl.setUserName(getUserName());
        employeeImpl.setCreateDate(getCreateDate());
        employeeImpl.setModifiedDate(getModifiedDate());
        employeeImpl.setEmpName(getEmpName());
        employeeImpl.setGrade(getGrade());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.empId = getEmpId();

        employeeCacheModel.groupId = getGroupId();

        employeeCacheModel.companyId = getCompanyId();

        employeeCacheModel.userId = getUserId();

        employeeCacheModel.userName = getUserName();

        String userName = employeeCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            employeeCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            employeeCacheModel.createDate = createDate.getTime();
        } else {
            employeeCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            employeeCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            employeeCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        employeeCacheModel.empName = getEmpName();

        String empName = employeeCacheModel.empName;

        if ((empName != null) && (empName.length() == 0)) {
            employeeCacheModel.empName = null;
        }

        employeeCacheModel.grade = getGrade();

        String grade = employeeCacheModel.grade;

        if ((grade != null) && (grade.length() == 0)) {
            employeeCacheModel.grade = null;
        }

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{empId=");
        sb.append(getEmpId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", empName=");
        sb.append(getEmpName());
        sb.append(", grade=");
        sb.append(getGrade());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.spring.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>empId</column-name><column-value><![CDATA[");
        sb.append(getEmpId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>empName</column-name><column-value><![CDATA[");
        sb.append(getEmpName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grade</column-name><column-value><![CDATA[");
        sb.append(getGrade());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
